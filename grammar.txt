# Rust-like 语言语法规则 (Grammar Rules)
# 基于PDF文档的精确语法定义
# 
# 符号说明:
# -> 定义为 (BNF标准表示法)
# | 或者
# 空 表示空产生式
# <> 表示非终结符
# '' 表示终结符

# ===== 1.1 基础程序结构 =====
Program -> <声明串>

<声明串> -> 空 | <声明> <声明串>

<声明> -> <函数声明>

<函数声明> -> <函数头声明> <语句块>

<函数头声明> -> fn <ID> '(' <形参列表> ')'

<形参列表> -> 空

<语句块> -> '{' <语句串> '}'

<语句串> -> 空

# ===== 0.1 变量声明内部 =====
<变量声明内部> -> mut <ID>

# ===== 0.2 类型 =====
<类型> -> i32

# ===== 0.3 可赋值元素 =====
<可赋值元素> -> <ID>

# ===== 1.2 语句扩展 =====
<语句串> -> <语句> <语句串>

<语句> -> ';'

# ===== 1.3 返回语句 =====
<语句> -> <返回语句>

<返回语句> -> return ';'

# ===== 1.4 函数输入 =====
<形参列表> -> <形参> | <形参> ',' <形参列表>

<形参> -> <变量声明内部> ':' <类型>

# ===== 1.5 函数输出 =====
<函数头声明> -> fn <ID> '(' <形参列表> ')' '->' <类型>

<返回语句> -> return <表达式> ';'

# ===== 2.1 变量声明语句 =====
<语句> -> <变量声明语句>

<变量声明语句> -> let <变量声明内部> ':' <类型> ';'

<变量声明语句> -> let <变量声明内部> ';'

# ===== 2.2 赋值语句 =====
<语句> -> <赋值语句>

<赋值语句> -> <可赋值元素> '=' <表达式> ';'

# ===== 2.3 变量声明赋值语句 =====
<语句> -> <变量声明赋值语句>

<变量声明赋值语句> -> let <变量声明内部> ':' <类型> '=' <表达式> ';'

<变量声明赋值语句> -> let <变量声明内部> '=' <表达式> ';'

# ===== 3.1 基本表达式 =====
<语句> -> <表达式> ';'

<表达式> -> <加法表达式>

<加法表达式> -> <项>

<项> -> <因子>

<因子> -> <元素>

<元素> -> <NUM> | <可赋值元素> | '(' <表达式> ')'

# ===== 3.2 表达式增加计算和比较 =====
<表达式> -> <表达式> <比较运算符> <加法表达式>

<加法表达式> -> <加法表达式> <加减运算符> <项>

<项> -> <项> <乘除运算符> <因子>

<比较运算符> -> '<' | '<=' | '>' | '>=' | '==' | '!='

<加减运算符> -> '+' | '-'

<乘除运算符> -> '*' | '/'

# ===== 3.3 函数调用 =====
<元素> -> <ID> '(' <实参列表> ')'

<实参列表> -> 空 | <表达式> | <表达式> ',' <实参列表>

# ===== 4.1 选择结构 =====
<语句> -> <if语句>

<if语句> -> if <表达式> <语句块> <else部分>

<else部分> -> 空 | else <语句块>

# ===== 4.2 增加else if =====
<else部分> -> else if <表达式> <语句块> <else部分>

# ===== 5.1 while循环结构 =====
<语句> -> <循环语句>

<循环语句> -> <while语句>

<while语句> -> while <表达式> <语句块>

# ===== 5.2 for循环结构 =====
<循环语句> -> <for语句>

<for语句> -> for <变量声明内部> in <可迭代结构> <语句块>

<可迭代结构> -> <表达式> '..' <表达式>

# ===== 5.3 loop循环结构 =====
<循环语句> -> <loop语句>

<loop语句> -> loop <语句块>

# ===== 5.4 增加break和continue =====
<语句> -> break ';' | continue ';'

# ===== 6.1 声明不可变变量 =====
<变量声明内部> -> <ID>

# ===== 6.2 借用和引用 =====
<因子> -> '*' <因子> | '&' mut <因子> | '&' <因子>

<类型> -> '&' mut <类型> | '&' <类型>

# ===== 7.1 函数表达式块 =====
<表达式> -> <函数表达式语句块>

<函数表达式语句块> -> '{' <函数表达式语句串> '}'

<函数表达式语句串> -> <表达式> | <语句> <函数表达式语句串>

# ===== 7.2 函数表达式块作为函数体 =====
<函数声明> -> <函数头声明> <函数表达式语句块>

# ===== 7.3 选择表达式 =====
<表达式> -> <选择表达式>

<选择表达式> -> if <表达式> <函数表达式语句块> else <函数表达式语句块>

# ===== 7.4 循环表达式 =====
<表达式> -> <loop语句>

<语句> -> break <表达式> ';'

# ===== 8.1 数组 =====
<类型> -> '[' <类型> ';' <NUM> ']'

<因子> -> '[' <数组元素列表> ']'

<数组元素列表> -> 空 | <表达式> | <表达式> ',' <数组元素列表>

# ===== 8.2 数组元素 =====
<可赋值元素> -> <元素> '[' <表达式> ']'

<可迭代结构> -> <元素>

# ===== 9.1 元组 =====
<类型> -> '(' <元组类型内部> ')'

<元组类型内部> -> 空 | <类型> ',' <类型列表>

<类型列表> -> 空 | <类型> | <类型> ',' <类型列表>

<因子> -> '(' <元组赋值内部> ')'

<元组赋值内部> -> 空 | <表达式> ',' <元组元素列表>

<元组元素列表> -> 空 | <表达式> | <表达式> ',' <元组元素列表>

# ===== 9.2 元组元素 =====
<可赋值元素> -> <元素> '.' <NUM>

# ===== 词法元素定义 =====
<ID> -> [a-zA-Z_][a-zA-Z0-9_]*

<NUM> -> [0-9]+

# ===== 关键字列表 =====
Keywords: fn, let, mut, if, else, while, for, in, loop, return, break, continue, i32

# ===== 操作符列表 =====
Operators: +, -, *, /, =, ==, !=, <, <=, >, >=, &, .., .

# ===== 分隔符列表 =====
Delimiters: (, ), {, }, [, ], ,, ;, :, ->

# ===== 注释 =====
LineComment: // 到行尾的所有字符
BlockComment: /* 任意字符 */

# ===== 语义约束说明 =====
# 1. 变量重影：变量允许二次声明，每次声明隐藏之前的绑定
# 2. 类型推导：未显式标注类型的变量需根据上下文推导类型
# 3. 类型一致性：表达式类型必须与变量/参数声明的类型一致
# 4. 函数调用：实参数量与形参数量必须一致，类型必须匹配
# 5. 循环控制：break和continue必须出现在循环体内
# 6. 引用规则：可变引用互斥，不可变引用可共存
# 7. 数组/元组访问：索引必须在合法范围内
# 8. 函数返回：有返回类型的函数必须返回相应类型的值
