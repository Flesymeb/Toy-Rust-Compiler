# Rust-like语言语法树 (AST)
# Generated by Rust-like Compiler

▼ 🏛️ Program (1)
  ▼ 🏛️ FunctionDecl (1)
    ▼ 属性
      token:
  Token(IDENTIFIER, 'main', L2C4)
      return_type: "i32"
      name: "main"
    ▼ 📦 FunctionExpr (6)
      ▶ 📝 LetDecl (2)
        ● 🔢 Number
          ▶ 属性
            token: Token(NUMBER, 10, L3C22)
        ● 📦 VariableInternalDecl
          ▶ 属性
            mutable: True
            name: Token(IDENTIFIER, 'x', L3C13)
      ▶ 📝 LetDecl (2)
        ● 🔢 Number
          ▶ 属性
            token: Token(NUMBER, 20, L4C18)
        ● 📦 VariableInternalDecl
          ▶ 属性
            mutable: False
            name: Token(IDENTIFIER, 'y', L4C9)
      ▶ 📝 LetDecl (2)
        ● 🔢 Number
          ▶ 属性
            token: Token(NUMBER, 0, L5C25)
        ● 📦 VariableInternalDecl
          ▶ 属性
            mutable: True
            name:
  Token(IDENTIFIER, 'flag', L5C13)
      ▶ 🔀 If (5)
        ▶ ⚡ BinaryOp (2)
          ▶ 属性
            op_token: Token(LT, '<', L9C17)
          ● 🏷️ Identifier
            ▶ 属性
              token: Token(IDENTIFIER, 'x', L9C15)
              name: "x"
          ● 🏷️ Identifier
            ▶ 属性
              token: Token(IDENTIFIER, 'y', L9C19)
              name: "y"
        ▶ 📄 Block (1)
          ▶ ➡️ Assign (2)
            ● 🔢 Number
              ▶ 属性
                token: Token(NUMBER, 2, L10C16)
            ● 🏷️ Identifier
              ▶ 属性
                token:
  Token(IDENTIFIER, 'flag', L10C9)
                name: "flag"
        ▶ ⚡ BinaryOp (2)
          ▶ 属性
            op_token: Token(GT, '>', L7C10)
          ● 🏷️ Identifier
            ▶ 属性
              token: Token(IDENTIFIER, 'x', L7C8)
              name: "x"
          ● 🏷️ Identifier
            ▶ 属性
              token: Token(IDENTIFIER, 'y', L7C12)
              name: "y"
        ▶ 📄 Block (1)
          ▶ ➡️ Assign (2)
            ● 🔢 Number
              ▶ 属性
                token: Token(NUMBER, 1, L8C16)
            ● 🏷️ Identifier
              ▶ 属性
                token:
  Token(IDENTIFIER, 'flag', L8C9)
                name: "flag"
        ▶ 📄 Block (1)
          ▶ ➡️ Assign (2)
            ● 🔢 Number
              ▶ 属性
                token: Token(NUMBER, 0, L12C16)
            ● 🏷️ Identifier
              ▶ 属性
                token:
  Token(IDENTIFIER, 'flag', L12C9)
                name: "flag"
      ▶ 🔄 While (2)
        ▶ 📄 Block (1)
          ▶ ➡️ Assign (2)
            ▶ ⚡ BinaryOp (2)
              ▶ 属性
                op_token: Token(MINUS, '-', L16C15)
              ● 🏷️ Identifier
                ▶ 属性
                  token: Token(IDENTIFIER, 'x', L16C13)
                  name: "x"
              ● 🔢 Number
                ▶ 属性
                  token: Token(NUMBER, 1, L16C17)
            ● 🏷️ Identifier
              ▶ 属性
                token: Token(IDENTIFIER, 'x', L16C9)
                name: "x"
        ▶ ⚡ BinaryOp (2)
          ▶ 属性
            op_token: Token(GT, '>', L15C13)
          ● 🏷️ Identifier
            ▶ 属性
              token: Token(IDENTIFIER, 'x', L15C11)
              name: "x"
          ● 🔢 Number
            ▶ 属性
              token: Token(NUMBER, 0, L15C15)
      ▶ ↩️ Return (1)
        ● 🔢 Number
          ▶ 属性
            token: Token(NUMBER, 0, L19C12)
